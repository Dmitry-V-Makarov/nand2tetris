// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // A-instruction decoding
    Mux16(a=instruction,b=ALUout,sel=instruction[15],out=outA);

    // C-instruction decoding
    Mux16(a[13]=instruction[13], b=instruction, sel=instruction[15], out[12]=AorM,out[11]=ZXin,out[10]=NXin,out[9]=ZYin,out[8]=NYin,out[7]=Fin,out[6]=NOin,out[5]=Ain,out[4]=Din,
    out[3]=Min, out[2]=JLTin, out[1]=JEQin, out[0]=JGTin);

    // ARegister
    Mux(a=true,b=Ain,sel=instruction[15],out=Aload);
    ARegister(in=outA,load=Aload,out=outA2,out[0..14]=addressM);

    // AorM to ALU y
    Mux16(a=outA2,b=inM,sel=AorM,out=AorMout);

    // DRegister to ALU x
    DRegister(in=ALUout,load=Din,out=Dout);

    // ALU
    ALU(x=Dout,y=AorMout,zx=ZXin,nx=NXin,zy=ZYin,ny=NYin,f=Fin,no=NOin,out=ALUout,out=outM, out[15]=MSbit,zr=ZRin,ng=NGin);

    // Positive (ps) status from ALU
    Or(a=MSbit,b=ZRin,out=temp);
    Not(in=temp,out=PSin);

    //// Counter load

    // PS or ZR
    Or(a=PSin,b=ZRin,out=PSorZRin);

    // Not ZR
    Not(in=ZRin,out=notZRin);

    // NG or ZR
    Or(a=NGin,b=ZRin,out=NGorZRin);

    // Counter Mux8Way16
    Mux8Way16(a[0]=false,b[0]=PSin,c[0]=ZRin,d[0]=PSorZRin,e[0]=NGin,f[0]=notZRin,g[0]=NGorZRin,h[0]=true,sel[2]=JLTin,sel[1]=JEQin,sel[0]=JGTin,out[0]=PCload);

    // Counter
    PC(in=outA2,load=PCload,inc=true,reset=reset,out[0..14]=pc);

    // WriteM
    Mux(a=false,b=true,sel=Min,out=writeM);

}